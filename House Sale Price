import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import Imputer
import scipy.stats as st

traindata = pd.read_csv("C:\\Users\\inspiron\\Downloads\\house-prices-advanced-regression-techniques\\train.csv")
testdata = pd.read_csv("C:\\Users\\inspiron\\Downloads\\house-prices-advanced-regression-techniques\\test.csv")
traindata.shape
testdata.shape
traindata = pd.DataFrame(traindata)
testdata = pd.DataFrame(testdata)

catdata= traindata.select_dtypes(include="O")
misscat=pd.DataFrame(catdata.isnull().sum())
misscat
misscat.sort_values(by=0, ascending=False)
misscatper=pd.DataFrame(misscat[0]/len(misscat[0]))
misscatper.sort_values(by=0, ascending=False)
misscatdata=traindata[['FireplaceQu','GarageType','GarageCond','GarageQual','GarageFinish','BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtQual','BsmtCond','MasVnrType','Electrical']]


numdata=traindata.select_dtypes(include=['int64','float64'])
missnum=pd.DataFrame(numdata.isnull().sum())
missnum.sort_values(by=0,ascending=False)
missdata=traindata[['LotFrontage','GarageYrBlt','MasVnrArea']]
nummeandata=missdata.fillna(missdata.mean())


misscatdata['FireplaceQu'] = misscatdata.fillna(misscatdata['FireplaceQu'].value_counts().index[0])
misscatdata['GarageType'] = misscatdata.fillna(misscatdata['GarageType'].value_counts().index[0])
misscatdata['GarageCond'] = misscatdata.fillna(misscatdata['GarageCond'].value_counts().index[0])
misscatdata['GarageQual'] = misscatdata.fillna(misscatdata['GarageQual'].value_counts().index[0])
misscatdata['GarageFinish'] = misscatdata.fillna(misscatdata['GarageFinish'].value_counts().index[0])
misscatdata['BsmtFinType2'] = misscatdata.fillna(misscatdata['BsmtFinType2'].value_counts().index[0])
misscatdata['BsmtExposure'] = misscatdata.fillna(misscatdata['BsmtExposure'].value_counts().index[0])
misscatdata['BsmtFinType1'] = misscatdata.fillna(misscatdata['BsmtFinType1'].value_counts().index[0])
misscatdata['BsmtQual'] = misscatdata.fillna(misscatdata['BsmtQual'].value_counts().index[0])
misscatdata['BsmtCond'] = misscatdata.fillna(misscatdata['BsmtCond'].value_counts().index[0])
misscatdata['MasVnrType'] = misscatdata.fillna(misscatdata['MasVnrType'].value_counts().index[0])
misscatdata['Electrical'] = misscatdata.fillna(misscatdata['Electrical'].value_counts().index[0])



trainanal= traindata.drop(['PoolQC','MiscFeature','Alley','Fence'],axis=1)

trainanal=trainanal.drop(['LotFrontage','GarageYrBlt','MasVnrArea','FireplaceQu','GarageType','GarageCond','GarageQual','GarageFinish','BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtQual','BsmtCond','MasVnrType','Electrical'],axis=1)


trainanal=pd.concat([trainanal,nummeandata,misscatdata], axis=1)


numout=trainanal.select_dtypes(include=['int64','float64'])
catout=trainanal.select_dtypes(include=['O'])

from scipy import stats
idx = np.all(stats.zscore(numout) < 3, axis=1)
train_cleaned = pd.concat([numout.loc[idx], catout.loc[idx]], axis=1)
train_cleaned.head()

train_cleaned.isnull().sum()
train_cleaned.columns

corr=train_cleaned.corr()
sns.heatmap(corr[(corr>=0.7) | (corr<=0.-7)])

#Removing Highly Correlated Variable
train_cleaned=train_cleaned.drop(['YearRemodAdd','KitchenAbvGr','HalfBath'],axis=1)


catdata=train_cleaned.select_dtypes(include=['O'])
catvar=catdata.columns

#Label Encoding
from sklearn.preprocessing import LabelEncoder 
lab=LabelEncoder()
for i in range(0, len(catvar)):
    train_cleaned[catvar[i]] = lab.fit_transform(train_cleaned[catvar[i]].astype(str))


trainfeature= train_cleaned.drop(['SalePrice'], axis=1)

trainout= train_cleaned.SalePrice

testcol = trainfeature.columns
testcol
testdatanew=testdata[testcol]

for i in range(0, len(catvar)):
    testdatanew[catvar[i]] = lab.fit_transform(testdatanew[catvar[i]].astype(str))
#Check for any NA values in test data
testdatanew.isnull().sum()

testnum=testdatanew.select_dtypes(include=['int64','float64'])
testnum.isnull().sum()
testnumdata=testnum[['LotFrontage','GarageYrBlt','MasVnrArea','GarageArea','GarageCars','BsmtHalfBath','BsmtFullBath','TotalBsmtSF','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF']]
testmean=testnumdata.fillna(testnumdata.mean())

testdatanew=testdatanew.drop(['LotFrontage','GarageYrBlt','MasVnrArea','GarageArea','GarageCars','BsmtHalfBath','BsmtFullBath','TotalBsmtSF','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF'],axis=1)
testfeature=pd.concat([testdatanew,testmean],axis=1)


#Training Model
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators = 100, random_state = 100)
rf.fit(trainfeature,trainout)

predictions = rf.predict(testfeature)
predictions=pd.DataFrame(predictions)
testdataout= pd.concat([testfeature,predictions],axis=1)
testdataout

testdataout.to_csv(r'C:\\Users\\inspiron\\Downloads\\house-prices-advanced-regression-techniques\\submission.csv')
